<!DOCTYPE html>
<html>
  <head>
      <title>Snake Game node.js</title>
      <link href="/style.css" rel="stylesheet" type="text/css">
  </head>

  <body>

    
    
    <pre id="arena"></pre>
    <div id="score">Your Score:</div>
    
    <form action="javascript:void(0);">
        Name:<br>
        <input type="text" name="name" id=name>
        <button onclick="loadDoc()">Submit</button>
    </form>
    <div id="highscores">
            <h1>
                High Scores
            </h1>
            <table class="center">
                <tr>
                    <th>Name</th>
                    <th>Score</th>
                    <th>Time</th>
                </tr>
                    
                <% dbscores.forEach(result=> { %>
                    <tr>
                        <td><%= result.name %></td>
                        <td><%= result.score %></td>
                        <td><%= result.ts %></td>
                    </tr>   
                <% }); %>

                </table>
            <ul>

            </ul>
        </div>
    

  </body>

    <script>
        document.addEventListener("keydown", updateDirection);
        // console.log(<%%>);
        var gameScore = 0;
        var death = false;
        const arenaSize = 20;
        var direction = "ArrowUp";
        const gameSpeed = 5 //1 for slow. 10 for fast
        var snake = [{x:Math.floor(arenaSize/2),y:Math.floor(arenaSize/2)}];
        var food = {x:Math.floor(Math.random() * arenaSize),y:Math.floor(Math.random() * arenaSize)};
        console.log("food at X: " + food.x + " Y: " + food.y);
        var arena = [];

        var interval = setInterval(() => {
            updateSnake();
            if(!checkDeath()){
                clearInterval(interval);
            };
            drawArena();
            logSnake();
        }, 1000/gameSpeed);

        function updateDirection(event) {
            direction = event.key;
        }
        function checkDeath(event) {
            if (snake[0].x == -1 || snake[0].x == 20 || snake[0].y == -1 || snake[0].y == 20){
                return false;
            }
            for (i = 1; i<snake.length;i++){
                if (snake[0].x == snake[i].x && snake[0].y == snake[i].y){
                    return false
                }
            }
            return true

        }
        function updateSnake(event) {
            if (direction == "ArrowUp") {
                snake.unshift({x:snake[0].x,y:snake[0].y-1});
            }
            if (direction == "ArrowDown") {
                snake.unshift({x:snake[0].x,y:snake[0].y+1});
            }
            if (direction == "ArrowLeft") {
                snake.unshift({x:snake[0].x-1,y:snake[0].y});
            }
            if (direction == "ArrowRight") {
                snake.unshift({x:snake[0].x+1,y:snake[0].y});
            }

            if (snake[0].x == food.x && snake[0].y == food.y){
                updateScore();
                spawnFood();
                console.log("food at X: " + food.x + " Y: " + food.y);
            } else {
                snake.pop();
            }
            
            // logSnake();
        }
        function spawnFood() {
            food = {x:Math.floor(Math.random() * arenaSize),y:Math.floor(Math.random() * arenaSize)};
        }
        function updateScore() {
            gameScore += 1;
            document.getElementById('score').innerHTML = "Your Score: " + gameScore;
        }
        function logSnake() {
            for (i = 0; i < snake.length; i++){
                console.log(snake[i]);
            }
        }
        function drawArena(){
            clearArena();
            drawSnake();
            drawFood();
            displayArena();
            // for (i=0;i<arena.length;i++){
            //     document.getElementById('arena').innerHTML = arena;
            // }
        }
        function clearArena(){
            arena = [];
            for (i = 0; i<arenaSize+2;i++){
                arena.push("路");
            }
            arena.push("\n");
            //clears the board to be redrawn
            for (i = 0; i<arenaSize;i++){
                arena.push("路");
                for (j = 0;j<arenaSize;j++){
                    arena.push(" ");
                }
                arena.push("路");
                arena.push("\n");
            }
            for (i = 0; i<arenaSize+2;i++){
                arena.push("路");
            }
            // console.log(arena);
        }
        function drawSnake(){
            //updates board to reflect snake
            for (i=0;i<snake.length;i++){
                arena[getPositionInArena(snake[i].x,[snake[i].y])] = "O";
            }
        }
        function drawFood(){
            //updates board to reflect food
            arena[getPositionInArena(food.x,food.y)] = "X";
        }
        function displayArena(){
            //updates board to reflect food
            document.getElementById('arena').innerHTML = arena.join('');
        }
        function getPositionInArena(x, y){
            var pos = arenaSize + 3
            pos += y*(arenaSize + 3)
            pos += x+1
            return pos
        }
        function loadDoc() {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                console.log(this.responseText);
                }
            };
            var submittedName = document.getElementById("name").value;
            console.log(document.getElementById("name"));
            console.log(submittedName);
            xhttp.open("GET", "/submitscore" + `/${submittedName}` + `/${gameScore}`, true);
            xhttp.send(); 
        }
    </script>

</html>